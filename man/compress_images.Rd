% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compress_images.R
\name{compress_images}
\alias{compress_images}
\title{Minify size your images}
\usage{
compress_images(
  input,
  output = NULL,
  verbose = TRUE,
  overwrite = FALSE,
  jpg_quality = "75",
  png_quality = "20-50",
  gif_colors = "64"
)
}
\arguments{
\item{input, output}{input and output directories}

\item{verbose}{should a log be printed in the console, default to TRUE.}

\item{overwrite}{logical; should existing destination files be overwritten?}

\item{jpg_quality}{Scale quantization tables to adjust image quality. Quality
is "0" (worst) to "100" (best); default is "75".}

\item{png_quality}{defined as \code{"min-max"}, instructs pngquant to use the least
amount of colors required to meet or exceed the max quality. If conversion results
in quality below the min quality the image won't be saved.}

\item{gif_colors}{Reduce the number of distinct colors in each output GIF to \code{gif_colors} or less.
It must be between 2 and 256. This can be used to shrink output GIFs or eliminate any local color tables.}
}
\value{
a data.frame with details about input files and compressed files.
}
\description{
Minify size of images located in a directory
and output results in another directory.

You will be able to use this function only if
\itemize{
\item the program 'node.js' is installed on your machine,
\item the command \code{\link[=compress_images_install]{compress_images_install()}} has been executed once
on your machine (it installs a set of "npm" packages).
}
}
\examples{
library(minimage)
library(locatexec)

was_avail <- compress_images_available()

if(exec_available("node") && exec_available("npm")){

  if(!was_avail)
    compress_images_install(force = TRUE)

  # generate dest folder
  new_dir <- tempfile()
  dir.create(new_dir)

  # run compression
  z <- compress_images(system.file(package = "minimage", "test-files"), new_dir)

  print(z)

  if(!was_avail)
    compress_images_uninstall()

}
}
